5
1 4 7 2 6

3
3 2 1


Need : for문을 돌리면서 i보다 뒤에 있고, arr[i] 보다 작은 element의 개수


Given	: 1 4 7 2 6
Sorted	: 1 2 4 6 7

Dp	: 0 1 2 0 0

Sum Of Dp = 3


Given	: 3 2 1
Sorted	: 1 2 3 

Dp	: 2 1 0

Sum Of Dp = 3


Solv.1
	1. 뒤에서 부터 돌면서 정렬된 배열(v)을 들고 진행
	2. 이진탐색으로 삽입 위치 찾고, 0번쨰 인덱스로부터 얼마나 떨어져있는지 구해서 Sum에 더함
		2 - 1. 이진탐색 - lower_bound, upper_bound 둘중 ?
		2 - 2. 삽입 위치 전에는 cur보다 작은 값만 존재해야함 -> lower_bound

		작은 값중 가장 큰 값
		2 - 3. 	check(x) == true, when v[x] < cur
			check(init_left) == true (이진탐색 전에 if(v[init_left] >= cur){ 제일 앞에 삽입, return 0 }
			check(init_right) == false
		2 -4.	left + 1 위치에 삽입, return left + 1

시간초과 ㅋ

==========================

Solv.2
	1. max_Heap 에 value 기준으로 value랑 index 삽입
	2. 가장 큰 value 뽑으면서 heap.size() - index (제일 뒤에 있어야 할 놈보다 뒤에 있는 놈들의 개수를 구하는 과정)

	Prob. 2번에서 max값을 뽑을 때 남아있는 애들 중 걔보다 뒤에 있는 애들의 index가 변해야함.
	(Expect worst case : 내림차순 입력 10, 9, 8, 7, 6, 5, 4, 3, 2 ,1)
		1) 뽑을때마다 걔보다 큰 애들 index 수정 -> 시간초과 예상
		2) 뽑은 애들 기록 해놓고 먼가를,,,먼가,,,한다...
	
		3) Heap을 50만개를...만드는거다..
			시간적으론 될거같고,,,(배열로 구현 후 이전 배열 복사, 새로운 값 insert)
			공간적으론..? (1 + 2 + ... + 500,000) 안됨ㅋ
			-> 하나의 Heap으로 어떻게 안되나?

=========================

1 4 7 2 6
0 0 1 1 

1 4	x
1 7	x
1 2	x
1 6	x
4 7	x
4 2	1
4 6	x
7 2	1
7 6	1
2 6	x

조합..!
될리가 없는뎅.. 
안댐ㅋ

=========================

풀이 슥 보니까 merge sort 쓰라길래

구현 후, right 가 더 크면 flag++, left 넣을때마다 cnt += flag...
ㅠ

